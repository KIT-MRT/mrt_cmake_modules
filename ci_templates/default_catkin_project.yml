variables:
  GIT_STRATEGY: none
  GIT_CLONE_PATH: $CI_BUILDS_DIR/gitlab

# Cache build results between building and testing
cache:
  paths:
  - catkin_ws/
stages:
  - build
  - test
  - verify
  - deploy

# Prepare workspace and checkout the code. This will be executed before every stage
before_script:
  # Environment variablen setzen
  - export SHELL="/bin/bash"
  # Prepare workspace (in folder catkin_ws)
  - sudo apt-get update
  - mrt ci prepare $CI_PROJECT_NAME -c $CI_COMMIT_SHA
  - cd catkin_ws
  # add current branch name to branch management
  - mrt ws branches set $CI_COMMIT_REF_NAME

build:
  stage: build
  only: [branches, tags, merge_requests] # means "always"
  script:
  # Build project and resolve deps at the same time in debug mode
  - mrt catkin build -s -rd -c --debug --default_yes --no-status $CI_PROJECT_NAME
  # generate documentation
  - mrt doc build --no-deps $CI_PROJECT_NAME
  - cp -r build_debug/$CI_PROJECT_NAME/doxygen_doc/html ../doxygen
  # make doxygen documentation available in gitlab
  artifacts:
    name: doxygen
    paths:
    - doxygen
    expire_in: 6 mos

general_code_quality:
  stage: build
  only: [master, release, merge_requests]
  allow_failure: true
  cache: {}
  image: 
    name: ${CI_REGISTRY}/mrt/misc/mrt_build/gl_codequality
    entrypoint: [""]
  variables:
    GIT_STRATEGY: fetch
    SOURCE_CODE: $CI_PROJECT_DIR
    CODECLIMATE_DEBUG: "True"
  before_script: []
  script:
    - /run.sh .
    - chmod a+rw gl-code-quality-report.json
  artifacts:
    paths: [gl-code-quality-report.json]
    expire_in: 6 mos

code_quality:
  dependencies:
    - general_code_quality
  cache:
    policy: pull
  needs: [general_code_quality]
  stage: test
  only: [master, release, merge_requests]
  artifacts:
    paths: [gl-code-quality-report.json]
    reports:
      codequality: gl-code-quality-report.json
  script:
  # Build code again, in case caching didn't work
  - mrt catkin build -s -rd --debug --default_yes --no-status $CI_PROJECT_NAME
  - source devel_debug/setup.bash
  - cd src/$CI_PROJECT_NAME
  - rm codeclimate.json || true
  - cp ../../../gl-code-quality-report.json codeclimate.json || true
  - mrt ci codequality $CI_PROJECT_NAME
  - cp codeclimate.json ../../../gl-code-quality-report.json

check_code_quality:
  dependencies:
    - code_quality
  cache:
    policy: pull
  needs: [code_quality]
  stage: verify
  only: [master, release, merge_requests]
  # default filename is codeclimate.json
  script:
  - mrt ci validate_codequality $MRT_QUALITY_LEVEL --filename gl-code-quality-report.json
  artifacts:
    paths: [gl-code-quality-report.json]
  before_script: []
  cache: {}

test:
  stage: test
  needs: [build]
  only: [branches, tags, merge_requests] # means "always"
  coverage: '/lines......: \d+.\d+\%/'
  variables:
    MRT_MIN_COVERAGE: $MRT_REQUIRED_COVERAGE
  script:
  # Build code again, in case caching didn't work
  - mrt catkin build -s -rd --debug --default_yes --no-status $CI_PROJECT_NAME
  # Run tests
  - source devel_debug/setup.bash
  - mrt catkin run_tests --no-status $CI_PROJECT_NAME --no-deps
  # Summarize results
  - catkin_test_results --verbose build_debug/$CI_PROJECT_NAME
  - cp -r build_debug/$CI_PROJECT_NAME/coverage .. || true
  # make coverage information available in gitlab
  artifacts:
    name: coverage
    paths:
    - coverage
    expire_in: 6 mos
    reports:
      junit: catkin_ws/build_debug/$CI_PROJECT_NAME/test_results/$CI_PROJECT_NAME/*.xml

report_licenses:
  stage: verify
  only: [master, release, merge_requests]
  needs: [build]
  cache:
    policy: pull
  script:
  - mrt ws resolve_deps -y
  - mrt ci report_licenses .
  - cp licenses.json ..
  artifacts:
    reports:
      license_management: licenses.json
 
deps:
  stage: verify
  needs: [build]
  only: [master, release, merge_requests]
  variables:
    MRT_CI_NO_TIDY: 1
  cache:
    paths:
    - catkin_ws/
    key: $CI_PROJECT_NAME-$CI_COMMIT_REF_NAME-deps
  script:
  # test all dependencies of this package. Exclude packages with -e, include with -i.
  - mrt ci test_deps -f --no-status --release $CI_PROJECT_NAME $MRT_NAMESPACE -f --default-fail-on-warning

# This job will create a homepage for your project, where you can browse coverage and doxygen.
# It is available under <namespace>.pages.mrt.uni-karlsruhe.de/<pkg_name>/<doxygen/coverage>/index.html
pages:
  before_script: []
  needs: [build]
  cache: {}
  stage: deploy
  script:
  # everything in the public folder will be available as website
  - mkdir public
  - cp -r coverage public/ || true
  - cp -r doxygen public/ || true
  artifacts:
    paths:
    - public
  only:
  # only execute for master branch
  - master
